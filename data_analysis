/* 0.0 - Access */

ssh -X mkim@jhpce03.jhsph.edu
cd /dcs07/trinetx/data/
cd /users/mkim/

srun --pty --x11 bash
module load sas
sas -helpbrowser SAS -xrm "SAS.webBrowser:'/usr/bin/chromium-browser'" -xrm "SAS.helpBrowser:'/usr/bin/chromium-browser'"

*******************************************************************************************************************************
  * Progname: 01_exploredata.sas
  * Date(due): 2024.03.04
  * Detail: 
*******************************************************************************************************************************

*************************************************************************
* 1.0 - Set up the environment in JHPCE *
*************************************************************************

/* srcdata and sp5data are hemal datasets */
libname tx "/dcs07/trinetx/data/SAS datasets";
libname tx5p "/dcs07/trinetx/data/SAS_datasets_5p";
libname test "/dcs07/trinetx/data/test_data";

/* location for my data analysis - team directory */
libname analysis "/dcs07/trinetx/data/test_sas/5p";


*************************************************************************
* 2.0 - Explore the data *
*************************************************************************

/*convert result values from character to number*/

data analysis.test_vitals;
  set tx5p.vitals_signs;
  num_value = input(value, 8.);
  replace;
run;

proc contents data=analysis.test_vitals;
run;

proc print data=analysis.test_vitals (obs=20);
run;


/* to list the LOINC variables */
proc print data=analysis.test_vitals (obs=20);
  var code_system code units_of_measure;
  where code_system = "LOINC";
run;

proc sort data=analysis.test_vitals out=analysis.list_vt
    nodupkey;
    where code_system = "LOINC";
    by descending code;               
run;

proc print data=analysis.list_vt (obs=80); 
  var code_system code units_of_measure;
run;

proc contents data=analysis.list_vt;
run;

*************************************************************************
* 2.1 - Map standardized_terminology *
*************************************************************************  

/* Map VITAL SIGNS LOINC terms */
proc sql;
  create table analysis.map_vit as
  select distinct a.*, b.code, b.code_description, b.code_system 
  from analysis.list_vt a left join test.standardized_terminology b 
  on a.code_system=b.code_system and a.code=b.code;
quit;

proc print data=analysis.map_vit (obs=100); 
 var code_system code code_description units_of_measure;
run;

  
/* table freq */
proc freq data=analysis.map_vit;
   table code_system code code_description units_of_measure;
run;

/* table means */
proc means data=analysis.map_vit;
run;

proc print data=analysis.map_vit (obs=100); 
 var code_system code code_description units_of_measure num_;
run;

   

*************************************************************************
* 2.2 - Explore the data for BMI *
*************************************************************************

/* alignment by id for 'by group processing' (it already seems to be aligned by id) */

proc sort data=analysis.test_vitals out=analysis.test_vt_id;
by patient_id;
run;

proc print data=analysis.test_vt_id (obs=50);
run;


/* BMI distribution */
proc sql;
  create table bmidis as
    select code, num_value    
    from analysis.test_vitals_by_id
  where where code like "%39156-5%";
quit;

proc print; run;

/* means of BMI */
proc means data=analysis.test_vitals_by_id min max maxdec=2;
where code like "%39156-5%";
var num_value;
run;

proc print; run;


*3. Event to patient level;
Proc sql;
select var
create table X
from y
group by id;
quit;

*************************************************************************
* 1.0 - Save the output  *
*************************************************************************

ods rtf file="users/mkim/trinetx/output/01_exploredata_5p.rtf";
footnote "Outputs generated from &progname..sas";


******************************************************************************************************************************************************
******************************************************************************************************************************************************

/*import the data file(take over 10mins)*/

data trinetx.test;
infile "/dcs07/trinetx/data/SAS_datasets_5p/lab_result.sas7bdat";
input 
  patient_id  $
  encounter_id  $
  code_system  $
  code  $
  date  $
  lab_result_num_val
  lab_result_text_val  $
  units_of_measure  $
  derived_by_TriNetX  $
  source_id  $
;
if _ERROR_ then call symputx('_EFIERR_',1);
run;


/*import-other ways*/
proc import out = trinetx.test
  datafile="/users/mkim/sas/lab_result.sas7bdat";
  dbms=
  getnames=yes;
run;


/*look at the data set contents*/
proc contents data=trinetx.test;
  run;
