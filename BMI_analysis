/* 0.0 - Access */

ssh -X mkim@jhpce03.jhsph.edu
cd /dcs07/trinetx/data/
cd /users/mkim/

srun --pty --x11 bash
module load sas
sas -helpbrowser SAS -xrm "SAS.webBrowser:'/usr/bin/chromium-browser'" -xrm "SAS.helpBrowser:'/usr/bin/chromium-browser'"

*******************************************************************************************************************************
  * Progname: 01_exploredata.sas
  * Date(due): 2024.03.04
  * Detail: 
*******************************************************************************************************************************

*************************************************************************
* 1.0 - Set up the environment in JHPCE *
*************************************************************************

/* srcdata and sp5data are hemal datasets */
libname tx "/dcs07/trinetx/data/SAS_datasets";
libname tx5p "/dcs07/trinetx/data/SAS_datasets_5p";
libname test "/dcs07/trinetx/data/test_data";

/* location for my data analysis - team directory */
libname analysis "/dcs07/trinetx/data/test_sas/5p";


*************************************************************************
* 2.0 - Explore the data *
*************************************************************************

*************
 * vitals *
*************

/* set the table and convert result values from character to numeric */

proc contents data=tx5p.vitals_signs;
run;

data analysis.test_vitals;
  set tx5p.vitals_signs;
  num_value = input(value, 8.);
  replace;
run;

proc contents data=analysis.test_vitals;
run;

proc print data=analysis.test_vitals (obs=20);
run;


/* to list up the LOINC variables in vitals dataset */

proc print data=analysis.test_vitals (obs=20);
  var code_system code units_of_measure;
  where code_system = "LOINC";
run;

proc sort data=analysis.test_vitals out=analysis.list_vt   
    nodupkey;
    where code_system = "LOINC";  
    by descending code;               
run;                                     /* there were 74 obs */

proc print data=analysis.list_vt (obs=80); 
  var code_system code units_of_measure;
run;

proc contents data=analysis.list_vt;
run;


/* distinct value of the coding system variable */
proc print data=tx.vitals_signs (obs=100);
run;

proc sql;
  create table analysis.test_vitals_code_list as
  select distinct code_system
  from tx.vitals_signs; 
quit;     
proc print data=analysis.test_vitals_code_list; run;


******************
  * lab_result *
******************

/* set the table and convert result values from character to number*/

proc contents data=tx5p.lab_result;
run;

data analysis.test_lab;    
  set tx5p.lab_result;
  lab_result_num_val = input(value, 8.);
run;                                /* there were 319431133 obs */

proc contents data=analysis.test_lab;
run;


/* to list up the LOINC variables in lab dataset */

proc print data=analysis.test_lab (obs=20);
  var code_system code units_of_measure;
  where code_system = "LOINC";
run;

proc sort data=analysis.test_lab out=analysis.list_lab
    nodupkey;
    where code_system = "LOINC";
    by descending code;               
run;                                     /* there were 13,776 obs */

proc print data=analysis.list_lab (obs=80); 
  var code_system code units_of_measure;
run;

proc contents data=analysis.list_lab;
run;

/* distinct value of the coding system variable */
proc print data=tx.lab_result (obs=100);
run;

proc sql;
  create table analysis.test_vitals_code_list as
  select distinct code_system
  from tx.vitals_signs; 
quit;     
proc print data=analysis.test_vitals_code_list; run;



*************************************************************************
* 2.1 - Map standardized_terminology *
*************************************************************************  

*************
 * vitals *
*************

/* Map VITAL SIGNS LOINC terms */
proc sql;
  create table analysis.map_vit as
  select distinct a.*, b.code, b.code_description, b.code_system 
  from analysis.list_vt a left join test.standardized_terminology b 
  on a.code_system=b.code_system and a.code=b.code;
quit;

proc print data=analysis.map_vit (obs=100); 
 var code_system code code_description units_of_measure;
run;

%LET code_vital = analysis.map_vit.code;

proc freq data=analysis.map_vit;
   table code_system code code_description units_of_measure;
   where code = "&code_vital";
run;
proc print data=analysis.map_vit (obs=50); run;
  
/* table freq */

proc sql;
  create table analysis.map_vit_all as
  select a.*, b.code, b.code_description, b.code_system 
  from analysis.list_vt a left join test.standardized_terminology b 
  on a.code_system=b.code_system and a.code=b.code;
quit;

proc print data=analysis.map_vit_all (obs=100); 
 var _all_;
run;

****************** no ****
%LET code_vital = analysis.map_vit.code;

proc freq data=analysis.map_vit;
   table code_system code code_description units_of_measure;
   where code = "&code_vital";
run;

proc print data=analysis.map_vit_all (obs=50); run;

******************
  * lab_result *
******************

/* Map LAB result LOINC terms */
proc sql;
  create table analysis.map_lab as
  select distinct a.*, b.code, b.code_description, b.code_system 
  from analysis.list_lab a left join test.standardized_terminology b 
  on a.code_system=b.code_system and a.code=b.code;
quit;                                                         /* there are 13776 obs */

proc print data=analysis.map_lab (obs=100); 
 var code_system code code_description units_of_measure;
 where units_of_measure like "kg/m2";
 title "List of LONIC variable in LAB result file";
run;

*************************************************************************
* 2.2 - Explore the data for BMI *
*************************************************************************

*************
 * vitals *
*************

/* alignment by id for 'by group processing' */

proc sort data=analysis.test_vitals out=analysis.test_vt_id;
by patient_id date;
run;
proc print data=analysis.test_vt_id (obs=50); run;

proc contents data=analysis.test_vt_id;
run;

proc print data=analysis.test_vt_id (obs=50);
   where code="39156-5";
   title "[Vitals] BMI trend over time by Patient";
run;


/* calculate summary statistics by individual */

proc means data=analysis.test_vt_id;
      var num_value;
      where code like "39156-5";
      class patient_id;
   output out=analysis.mean_bmi_by_patient 
       mean=mean_bmi
       std=std_bmi
       min=min_bmi
       max=max_bmi;
run;

proc print data=analysis.mean_bmi_by_patient (obs=50); 
   title "Summary Statistics of BMI by Patient";
run;

/* examine extreme values */
proc univariate data=analysis.test_vt_id;
      var num_value;
      where code like "39156-5";
run;


******************
  * lab_result *
******************

/* alignment by id for 'by group processing' */

proc sort data=analysis.test_lab out=analysis.test_lab_id;
by patient_id date;
run;
proc print data=analysis.test_lab_id (obs=50); 
run;                                         /* there are 319431133 obs */

proc contents data=analysis.test_lab_id;
run;

proc print data=analysis.test_lab_id (obs=50);
   where code="89270-3";
   title "[Lab] BMI trend over time by Patient";
run;

/* calculate summary statistics by individual */

proc means data=analysis.test_lab_id;
      var lab_result_num_val;
      where code like "89270-3";
      class patient_id;
   output out=analysis.mean_estbmi_by_patient 
       mean=mean_bmi
       std=std_bmi
       min=min_bmi
       max=max_bmi;
run;

proc print data=analysis.mean_estbmi_by_patient (obs=50); 
   title "Summary Statistics of estimated BMI by Patient";
run;

/* examine extreme values */
proc univariate data=analysis.test_vt_id;
      var num_value;
      where code like "89270-3";
run;

*************************************************************************
* 1.0 - Save the output  *
*************************************************************************

ods rtf file="users/mkim/trinetx/output/01_exploredata_5p.rtf";
footnote "Outputs generated from &progname..sas";


******************************************************************************************************************************************************
******************************************************************************************************************************************************

/*import the data file(take over 10mins)*/

data trinetx.test;
infile "/dcs07/trinetx/data/SAS_datasets_5p/lab_result.sas7bdat";
input 
  patient_id  $
  encounter_id  $
  code_system  $
  code  $
  date  $
  lab_result_num_val
  lab_result_text_val  $
  units_of_measure  $
  derived_by_TriNetX  $
  source_id  $
;
if _ERROR_ then call symputx('_EFIERR_',1);
run;


/*import-other ways*/
proc import out = trinetx.test
  datafile="/users/mkim/sas/lab_result.sas7bdat";
  dbms=
  getnames=yes;
run;


/*look at the data set contents*/
proc contents data=trinetx.test;
  run;
